##!/bin/bash
## Configured to use https://apps.terraform.io

## Arguments
## $1 = Workspace to use
## $2 = Optional action, defaults to creating a terraform plan
##   Available options: destroy, apply, init-upgrade, pre-setup-vpc
##     destroy  = Destroys the Terraform environment, will prompt for user confirmation
##     apply  = Applies the most recent deploy.plan output, will prompt for user confirmation
##     init-upgrade  = Will reinitialize all modules and providers within a given workspace and specified component's directory
##     pre-setup-vpc  = This is required for all first VPC runs to satisfy a Terraform resource dependencies

TERRAFORM_ENV="test"
WORKSPACES=("eks-network" "eks" "eks-iam")
PLAN_FILE="deploy.plan"
BACKEND_FILE="backend.hcl"
LOCAL_SECRETS="secrets.tfvars"
EXTERNAL_VARS_FILE="${TERRAFORM_ENV}.tfvars"

## Check if argument passed is a valid workspace within the defined workspace array
for WS in "${WORKSPACES[@]}"
do
  if [[ "$WS" == "$1" ]] ; then
    TF_WORKSPACE="${TERRAFORM_ENV}-$1"
    break
  fi
done

## Throw an error if this is an invalid workspace
if [[ ${TF_WORKSPACE} == "" ]] ; then
  echo "Please specify a valid workspace. The following workspaces are available:"
  for WS in "${WORKSPACES[@]}"
  do
    echo "${WS}"
  done
  exit 1
fi

## Workspace is set in check stages, change into directory and start running terraform
cd $1

if [[ ! -f ${BACKEND_FILE} ]] ; then
  echo "${BACKEND_FILE} not found"
  exit
fi

# This init makes sure that terraform is reading the latest backend.hcl configuration
terraform init -backend-config=${BACKEND_FILE}
#
## This init ensures that the workspace created/selected has instantiated the necessary terraform providers
terraform init

## Set Terraform action
if [[ $2 == "destroy" ]] ; then
  TERRAFORM_EXEC="terraform destroy"
elif [[ $2 == "apply" ]] ; then
  TERRAFORM_EXEC="terraform apply"
elif [[ $2 == "init-upgrade" ]] ; then
  TERRAFORM_EXEC="terraform init -upgrade"
elif [[ $2 == "pre-setup-vpc" && $1 == "eks-network" ]] ; then
  TERRAFORM_EXEC="terraform plan -out deploy.plan -target=module.eks_vpc.aws_subnet.private -target=module.eks_vpc.aws_subnet.public"
else
  TERRAFORM_EXEC="terraform plan -out deploy.plan"
fi

if [[ -f "${LOCAL_SECRETS}" ]] ; then
  $TERRAFORM_EXEC -var-file="${LOCAL_SECRETS}" -var-file="${EXTERNAL_VARS_FILE}"
else
  $TERRAFORM_EXEC -var-file="${EXTERNAL_VARS_FILE}"
fi

