---
version: 0.2

env:
  variables:
    K8S_DEPLOYMENT_APP: "cantaloupe"
    K8S_NAMESPACE: "test-iiif"
    K8S_DEPLOYMENT_CONTAINER_IMAGE_TAG: "latest"
    K8S_DEPLOYMENT_CANTALOUPE_STABLE_CONTAINER_IMAGE_TAG: "4.1.4"
    K8S_TEST_CLUSTER: "test-iiif-cluster"
    K8S_PROD_CLUSTER: "prod-iiif-cluster"
  parameter-store:
    K8S_DEPLOYMENT_ROBOT_ARN: "iiif.k8s.robot.role.arn"
    K8S_TEST_CANTALOUPE_S3_ACCESS_KEY: "iiif.test.cantaloupe.s3.access.key"
    K8S_TEST_CANTALOUPE_S3_SECRET_KEY: "iiif.test.cantaloupe.s3.secret.key"
    K8S_TEST_CANTALOUPE_ADMIN_PASSWORD: "iiif.test.cantaloupe.admin.password"
    K8S_TEST_FESTER_S3_ACCESS_KEY: "iiif.test.fester.s3.access.key"
    K8S_TEST_FESTER_S3_SECRET_KEY: "iiif.test.fester.s3.secret.key"
    K8S_PROD_CANTALOUPE_S3_ACCESS_KEY: "iiif.prod.cantaloupe.s3.access.key"
    K8S_PROD_CANTALOUPE_S3_SECRET_KEY: "iiif.prod.cantaloupe.s3.secret.key"
    K8S_PROD_CANTALOUPE_ADMIN_PASSWORD: "iiif.prod.cantaloupe.admin.password"
    K8S_PROD_FESTER_S3_ACCESS_KEY: "iiif.prod.fester.s3.access.key"
    K8S_PROD_FESTER_S3_SECRET_KEY: "iiif.prod.fester.s3.secret.key"
phases:
  install:
    commands:
      - apk -q add --update curl py-pip jq
      - pip -q install awscli
      # Install Kubectl recommended by EKS documentation for Kubernetes version 1.15
      - curl -s -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.15.10/2020-02-22/bin/linux/amd64/kubectl
      - chmod +x ./kubectl
      - aws --version
      - terraform version
  build:
    commands:
      - export PATH=$PWD/:$PATH
      # Set variable for which cluster this is accessing
      - |
          if [ "${K8S_NAMESPACE}" = "prod-iiif" ] ; then
            IIIF_CLUSTER="${K8S_PROD_CLUSTER}"
          else
            IIIF_CLUSTER="${K8S_TEST_CLUSTER}"
          fi

          # Create local kubeconfig file with access to AWS IAM Role that has limited privileges to deploy to Kubernetes deployment objects
          aws eks update-kubeconfig --name "${IIIF_CLUSTER}" --region us-west-2 --role-arn "${K8S_DEPLOYMENT_ROBOT_ARN}"
      - |
          TF_ENV_SUBPATH=$(echo "${K8S_NAMESPACE}" | cut -d '-' -f1)
          # Due to the lack of a private vault tfvars file running on the container, the build needs another mechanism to access the sensitive key/value pairs.
          # The mechanism to access is to utilize Systems Parameters in AWS where the CodeBuild role has access to retrieve the values.
          # The following if statements sets all parameter store sensitive variables into localized variables to be used in this build.
          # The if statement is currently used to match against prod or test. If there are new variables to be added, it should also be reflected in
          # in the corresponding environments within their non-checked in vault file.
          if [ "${TF_ENV_SUBPATH}" = "prod" ] ; then
            CANTALOUPE_S3_ACCESS_KEY="${K8S_PROD_CANTALOUPE_S3_ACCESS_KEY}"
            CANTALOUPE_S3_SECRET_KEY="${K8S_PROD_CANTALOUPE_S3_SECRET_KEY}"
            CANTALOUPE_ADMIN_PASSWORD="${K8S_PROD_CANTALOUPE_ADMIN_PASSWORD}"
            FESTER_S3_ACCESS_KEY="${K8S_PROD_CANTALOUPE_S3_ACCESS_KEY}"
            FESTER_S3_SECRET_KEY="${K8S_PROD_CANTALOUPE_S3_SECRET_KEY}"
          else
            CANTALOUPE_S3_ACCESS_KEY="${K8S_TEST_CANTALOUPE_S3_ACCESS_KEY}"
            CANTALOUPE_S3_SECRET_KEY="${K8S_TEST_CANTALOUPE_S3_SECRET_KEY}"
            CANTALOUPE_ADMIN_PASSWORD="${K8S_TEST_CANTALOUPE_ADMIN_PASSWORD}"
            FESTER_S3_ACCESS_KEY="${K8S_TEST_CANTALOUPE_S3_ACCESS_KEY}"
            FESTER_S3_SECRET_KEY="${K8S_TEST_CANTALOUPE_S3_SECRET_KEY}"
          fi

          # Change into the prod or test terraform environment and initialize necessary Terraform providers
          cd environments/$TF_ENV_SUBPATH/k8s && terraform init

          # If this is a container deployment, set a stable tag instead of latest
          if [ "${K8S_DEPLOYMENT_CONTAINER_IMAGE_TAG}" = "latest" ] ; then
            CANTALOUPE_TAG="${K8S_DEPLOYMENT_CANTALOUPE_STABLE_CONTAINER_IMAGE_TAG}"
          else
            CANTALOUPE_TAG="${K8S_DEPLOYMENT_CONTAINER_IMAGE_TAG}"
          fi
          # Check if this a Cantaloupe deployment, if so, use the corresponding Terraform command to support variables with previously defined stored secret
          if [ "${K8S_DEPLOYMENT_APP}" = "cantaloupe" ] ; then
            terraform apply -compact-warnings --auto-approve \
            -var-file=$TF_ENV_SUBPATH.tfvars \
            -var "cantaloupe_deployment_container_image_version=${CANTALOUPE_TAG}" \
            -var "cantaloupe_deployment_s3_access_key=${CANTALOUPE_S3_ACCESS_KEY}" \
            -var "cantaloupe_deployment_s3_secret_key=${CANTALOUPE_S3_SECRET_KEY}" \
            -var "cantaloupe_deployment_admin_password=${CANTALOUPE_ADMIN_PASSWORD}" \
            -target="kubernetes_deployment.${K8S_DEPLOYMENT_APP}"
            if [ "${CANTALOUPE_TAG}" = "${K8S_DEPLOYMENT_CANTALOUPE_STABLE_CONTAINER_IMAGE_TAG}" ] && [ $? != 0 ] ; then
              kubectl -n ${K8S_NAMESPACE} rollout restart deployment/${K8S_DEPLOYMENT_APP}
            fi
          fi

          # Check if this a Fester deployment, if so, use the corresponding Terraform command to support variables with previously defined stored secret
          if [ "${K8S_DEPLOYMENT_APP}" = "fester" ] ; then
            terraform apply -compact-warnings --auto-approve \
            -var-file=$TF_ENV_SUBPATH.tfvars \
            -var "fester_deployment_container_image_version=${K8S_DEPLOYMENT_CONTAINER_IMAGE_TAG}" \
            -var "fester_deployment_s3_access_key=${FESTER_S3_ACCESS_KEY}" \
            -var "fester_deployment_s3_secret_key=${FESTER_S3_SECRET_KEY}" \
            -target="kubernetes_deployment.${K8S_DEPLOYMENT_APP}"
            # If this is using latest, Terraform won't redeploy the deployment. The rollout mechanism for kubectl is used to supplement redeployments of latest tags
            if [ "${K8S_DEPLOYMENT_CONTAINER_IMAGE_TAG}" = "latest" ] && [ $? != 0 ] ; then
              kubectl -n ${K8S_NAMESPACE} rollout restart deployment/${K8S_DEPLOYMENT_APP}
            fi
          fi
